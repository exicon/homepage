(page "company/contact/index.html"
	(:require
		[homepage.layout :as layout]
		[ajax.core :refer [POST]]
		[validateur.validation :refer [validation-set presence-of format-of valid?]]
		))

(def office-list [
	{
	:country "HK"
	:name "Hong Kong"
	:address "Wilson House, Suite 302, 19 Wyndham St Central, Hong Kong."
	:phone ""
	:email "amanda@exiconglobal.com"
	}

	{
	:country "SF"
	:name "United States"
	:address "Suite 2710, 101 California Street, San Francisco CA 94111, U.S.A."
	:phone ""
	:email "rebecca@exiconglobal.com"
	}

	{
	:country "LN"
	:name "London"
	:address "Tech City, 228 Whitechapel Road, London E1 1BJ, United Kingdom."
	:phone ""
	:email "cat@exiconglobal.com"
	}
]
)

(defn office-options [opts]
	(div :class "left aligned column office-box" :do-class (cell= (:country opts))
		(p (text (:name opts)))
		(p :class "office-address" (text (:address opts)))
		(p :class "office-phone" (text (:phone opts)))
		(p :class "office-email" "E " (a :href (str "mailto:" (:email @opts))  (text (:email opts))))
	)
)

(defn office-options-section []
	(section
		:id "office-list"
		(div :class "ui one column grid"
			(div :class "column"
				(h2 :class "ui header" "Our Location"))
			(loop-tpl :bindings [opt office-list]
			(office-options opt))
		)
	)
)

(defn contact-form []
	(let [
		this-val #(-> % .-currentTarget .-value)
		checked? #(-> % .-currentTarget .-checked)
		fname (cell "")
		lname (cell "")
		workEmail (cell "")
		companyName (cell "")
		question (cell "")
		agree-to-receive-info (cell true)
		ans (cell nil)
		fields (cell= {
			:fname {:value fname :name "First Name" :required true}
			:lname {:value lname :name "Last Name" :required true}
			:workEmail {:value workEmail :name "Email" :required true}
			:companyName {:value companyName :name "Company" :required false}
			:question {:value question :name "Message" :required false}
			:agree-to-receive-info {:value agree-to-receive-info :required false}})
		receive-msg {
			true "Yes, I would like to receive offers and information from Exicon. \n"
			false "No, I don't want to receive offers and information from Exicon. \n"
		}
		to-validate (validation-set
			(presence-of :fname
				:message "Please enter your first name.")
			(presence-of :lname
				:message "Please enter your last name.")
			(format-of :workEmail
                 :format #"(?i)\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b"
                 :message "The email address is invalid, please enter a valid one."
                 :blank-message "Please enter your email address."))
		field-cell (cell=
			(apply assoc {}
				(interleave
					(keys fields)
					(map
						#(:value %)
						(vals fields)))))
		invalid-msg-map (cell= (to-validate field-cell))
		;error "OMG! Our new intern unplugged the server again... Please contact us at info@exiconglobal.com."
		;error2 "OMG! The aliens are attacking our site! Please contact us at info@exiconglobal.com."
		;error "Wait! You have been selected for special Exicon treament, please contact me directly at cat@exiconglobal.com."
		error #(div "We are currently experiencing some technical difficulities, please contact us at info@exiconglobal.com.")
		missing (fn []
			(div "Some fields have problems, please check:"
				(br)
				(map (fn [msg] [(first msg)(br)]) (vals @invalid-msg-map)) ))
		thankyou #(div "Thank you! We have received your message and will be in touch shortly.")
		confirm1
			#(div :class "confirm inline field"
				(div "Please answer the question to prove you are not a robot: 2+2")
				(input :type "text" :name "email"
					:id "email"
					:autocomplete "off")
				(div :class "helper"))
		random (+ 1 (rand-int 6))
		confirm2
			(fn[] (div :class "confirm2 inline field"
				(label (text "Let us know you are not a robot by answering the following question - Two plus ~{random} = "))
				(input :type "text" :class "ans"
					:keyup #(reset! ans (this-val %))
					:change #(reset! ans (this-val %)))))
		checking #(empty? (val-id "email"))
		checking2 (cell= (= (+ 2 random) (int ans)))
		message (cell div)
		invalid-field? #(and (= %2 missing) (contains? @invalid-msg-map %1))
		validated (cell false)
		reset-finish #(if (and (= @message missing) (empty? @invalid-msg-map))
				(reset! message div))
		val-change (fn [lens get-v]
			(fn [input]
				(reset! lens (get-v input))
				nil))
		success (fn [] (reset! message thankyou))
		fail (fn [] (reset! message error))
		refill (fn [] (reset! message missing))
		fields-elem (fn [key field elem lens]
			(div :class "field"
				:do-class (cell=
					{:error (and
						checking2
						(invalid-field? key message)
						(:required field)
						lens)})
				(label (text (str (:name field) ":")))
				(elem {
					:placeholder ""
					:keyup (val-change lens this-val)}
					:change (val-change lens this-val))))
		data (cell= {
			:tandcReg "1"
			:send "Send"
			:firstName (str fname lname)
			:workEmail workEmail
			:companyName companyName
			:question (str (receive-msg agree-to-receive-info) question)})
		post #(POST
			"//www.exiconglobal.com/company/contact-manager/"
			;"//localhost:3003"
			{:params @data
			:handler success
			:error-handler fail})
		form_submit (fn []
			(if (and (checking) @checking2)
				(if (valid? to-validate @field-cell)
					(do
						(print @data)
						(post))
					(refill))
				(reset! validated true)))]
		(div :class "ui warning error form large"
			(div :class "two fields"
				(fields-elem :fname (:fname @fields) (input :type "text") fname)
				(fields-elem :lname (:lname @fields) (input :type "text") lname))
			(fields-elem :workEmail (:workEmail @fields) (input :type "text") workEmail)
			(fields-elem :companyName (:companyName @fields) (input :type "text") companyName)
			(fields-elem :question (:question @fields) (textarea) question)
			(confirm2)
			(div :class "ui message error"
				:do-class (cell= {:hide (or checking2 (not validated))})
				"Please answer the question above!")
			(div :class "inline field"
				(input :class "coll-info" :type "checkbox" :checked true
					:change (val-change agree-to-receive-info checked?))
				(label "Yes, I would like to receive offers and information from Exicon"))
			(div :class "field"
				(label :class "terms" "*Exicon does not share, sell, rent, or trade personally identifiable information with third parties for promotional purposes. "
					(a :href "http://blog.exiconglobal.com/corp/legal/terms-of-use/"
						:target "_blank"
						"Exicon's Terms and Conditions")))
			(div :class "ui message"
				:do-class (cell= {
					:hide (or
						(not (#{thankyou missing error} message))
						(and (= missing message) (empty? invalid-msg-map)))
					:warning (#{thankyou missing} message)
					:error (#{error} message)})
				(cell= ((message invalid-msg-map) {:class "header"})))
			(div :class "ui submit button" :click form_submit
				"Contact Me")
			(confirm1)
			(input :type "hidden" :name "firstName" :value (cell= (str fname lname)))
			(input :type "hidden" :name "tandcReg" :value "1")
			(input :type "hidden" :name "send" :value "Send"))
))

(layout/main :id "contact"
	:pagetitle "Contact us | Mobile | Apps | AppBoard"
	:pagedescription "Contact us"
	(section :class "ui one column full-width-container"
		(div :id "page-title" :class "center aligned row"
			(div :class "column"
				(h1 "Contact Us")))
	)

	(section :class "ui page grid page-details"
		(div :class "ten left floated wide column"
			(div :class "ui one column grid"
				(div :class "column"
					(h2 :class "ui header" "Leave us a message and we'll be in touch right away."))
				(div :class "column"
					(contact-form)))
		)
		(div :class "four right floated wide column"
			(office-options-section)
		)

	)

)
