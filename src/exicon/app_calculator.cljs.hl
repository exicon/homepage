(ns exicon.app-calculator
  (:require
    [clojure.string :refer [join reverse replace]]
    [exicon.calculator :refer
     [current-submission selected-platforms selected-size
      selected-login selected-features selected-languages selected-stage result
      value-title app-name-item size-items login-items features-items
      platforms-items stage-items]]
    [exicon.platform-selector :refer [platform-selector toggle-in-set]]))

(with-init!
  (.sticky (js/jQuery "#computer-cost-summary")
        (clj->js {:context "#computer-relative-container"
                  :offset 110
                  :pushing true})))

(defn grouping-number [val]
  (-> val
      str
      reverse
      (replace #"(\d{3})" "$1,")  ; insert commas
      reverse
      (replace #"^,(.*)" "$1")))  ; remove leading comma

(def $ "US$")

(defn usd-currency [integer]
  (str $ (grouping-number integer)))

(defelem vector-img [attr kids]
  ((object (dissoc attr :src))
   :type "image/svg+xml"
   :data (:src attr)
   kids))

(defelem img-option
  [{:keys [selected click]
    {:keys [value title image description]} :item}]
  (a :class "img-option center aligned column" :click click
     ((div :class "ui center aligned basic app-calc segment")
      :class (cell= {:inverted selected :light-teal-bg selected})
      (img :class "responsive"
           :src (cell= (str "/images/app-calc/" image)))
      (div :class "center aligned column title"
           (span :class"ui small header"
                 title (br) description)))))

(defelem img-select
  [{:keys [class items title data columns cost-result toggle-data selected?]}]
  ((div :class "ui attached segment") :class class
   (h3 title)
   (div :class (str "ui "columns" column center aligned doubling grid")
        (loop-tpl :bindings [item items]
                  (img-option
                    :item @item
                    :click #(swap! data toggle-data (:value @item))

                    :selected (cell= (selected? data (:value item))))))))

(defelem multi-select [attr kids]
  (img-select
    (merge attr {:toggle-data toggle-in-set :selected? contains?}) kids))

(defn toggle-value [current-val new-val default-val]
  (if (= current-val new-val) default-val new-val))

(defelem single-select [attr kids]
  (img-select
    (merge attr {:toggle-data toggle-value :selected? =}) kids))

(defelem range-select [{:keys [title data cost-result]}]
  (div :class "ui attached segment"
       (h3 title)
       (div :class "ui grid"
            (div :class "five wide column"
                 (img :class "responsive"
                      :src "/images/app-calc/market-localization.png"))
            (div :class "four wide column"
                 (select :class "ui large fluid input"
                         :change #(reset! data @%)
                         :value selected-languages
                         (map #(option :value % (str %)) (range 1 11)))))))

(defelem cost-section [{:keys [class]} [header txt]]
  ((div)
   (h5 :class "ui header" header)
   (p txt)
   (div :class "ui divider"
        :toggle (not= class "bottom"))))

(defelem cost-summary [attr kids]
  [(h5 :class "ui top attached header" "App Build Cost")
   (div :class "ui bottom attached segment"
        (div
          :toggle (cell= (not(= (first result) 0)))
          (h5 :class "ui header" "Total (USD):")
          (p
            (b (text
                 (if (zero? (last result))
                   (str (usd-currency 0))
                   (str
                     (usd-currency (first result))
                     " - "
                     (usd-currency (last result)))))))
          #_(div :class "ui divider"))

        (cost-section
          :class "top" (text "Platforms:")
          (text (join ", " (value-title selected-platforms platforms-items))))

        (cost-section
          (text "Size:")
          (text (join "" (value-title selected-size size-items))))

        (cost-section
          (text "Login:")
          (text (join "" (value-title selected-login login-items))))

        (cost-section
          (text "Features:")
          (text (join ", " (value-title selected-features features-items))))

        (cost-section
          (text "Markets:")
          (text (str selected-languages " markets")))

        (cost-section
          :class "bottom" (text "Stage:")
          (text (join "" (value-title selected-stage stage-items))))
        )])

(defn calculator-fields []
  [(div :class "ui top attached segment"
        (h3 "Which devices will the app run on?" (br)
            "(You can select multiple)")
        (div
          (platform-selector
            :data selected-platforms
            :cost-result result)))
   (single-select
     :data selected-size
     :columns "three"
     :cost-result result
     :items size-items
     :title "How big will the app be?")
   (single-select
     :data selected-login
     :columns "three"
     :cost-result result
     :items login-items
     :title "How will your users sign into the app?")
   (multi-select
     :data selected-features
     :columns "three"
     :cost-result result
     :items features-items
     :title ["Which features will your app include?"
             (br)
             "(You can select multiple)"])
   (range-select
     :data selected-languages
     :cost-result result
     :title "How many markets?")

   (single-select
     :class "bottom"
     :data selected-stage
     :cost-result result
     :columns "four"
     :items stage-items
     :title "At what stage is your project?")])

(defn app-calculator []
  [(div :class "ui computer only container grid"
        (div :id "computer-relative-container" :class "twelve wide column"
             (calculator-fields))
        (div :class "four wide column"
             (div :id "computer-cost-summary" :style "padding-right:0; z-index:10" :class "ui sticky"
                  (cost-summary))))

   (div :class "ui form mobile tablet only container grid"
        (div :class "sixteen wide column"
             (div :class "ui bottom fixed menu inverted teal large borderless"
                  (div :class "item"
                    :toggle (cell= (not(= (first result) 0)))
                    (text (str "Total (USD): "
                         (if (zero? (last result))
                             (str (usd-currency 0))
                             (str
                               (usd-currency (first result))
                               " - "
                               (usd-currency (last result)))))))))
        (div :class "sixteen wide column"
             (calculator-fields)))])
