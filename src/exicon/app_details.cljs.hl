(ns exicon.app-details
  (:require
    [exicon.utils :refer [tbl]]
    [formative.parse :as fp]
    [homepage.image :as image]))

(defc app-details {:tnc false :location #{}})
(defc user-details nil)
(defc problems nil)
(defc= error-fields (set (flatten (map #(:keys %) problems))))

(def label-map
  (tbl [:value :title]
       :first-name "First Name"
       :last-name "Last Name"
       :email "Email"
       :phone "Phone number"
       :company-name "Company name"
       :password "Password"
       :tnc "Terms & Conditions"
       ))

(def valid-app-idea
  {:fields [{:name :first-name :type :text}
            {:name :last-name :type :text}
            {:name :email :type :email}
            {:name :company-name :type :text}
            {:name :password :type :password}
            {:name :phone :type :int}
            {:name :tnc :type :boolean}]
   :validations [[:required [:first-name :last-name :email :password :company-name :tnc] ]
                 [:min-length 6 :password]
                 ]})

(defn validate-app-idea []
  (try
    (do
      (fp/parse-params valid-app-idea (assoc  @user-details :tnc (:tnc @app-details)))
      (reset! problems {}))
    (catch js/Error e
      (reset! problems (:problems (.-data e))))))


(defelem form-input [{:keys [label-txt object data type required to-validate]
                      :or {type "text" required nil to-validate false}} kids]
  ((div :class "field")
   :class (cell= {:required required
                  :error (if (error-fields data) true false)})
   (label :text label-txt)
   (if (= type :textarea)
     (textarea :change #(reset! object (assoc @object data @%)))
     (input :type type
            :change #(do
                       (reset! object (assoc @object data @%))
                       (when (or required to-validate)
                         (validate-app-idea)))))
   kids))


(defn checkbox-state [field elem]
  (if (field elem) (disj field elem) (conj field elem)))

(defn checkbox-checked [id elem]
  (if (id elem)
    true false))

(def location-items (tbl [:id :image :label1 :checkbox1-id :sub-label]
                         :location "/images/app-builder/internal.png" "Internal Audience" :internal "(Employees, Partners, Suppliers)"
                         :location "/images/app-builder/local.png" "Local" :local "(1 language)"
                         :location "/images/app-builder/regional.png" "Regional" :regional "(2 or more languages)"
                         :location "/images/app-builder/global.png" "Global" :global "(Over 5 languages)"
                         ))

(defn item-checkbox [item]
  (div :class "center aligned column"
       (div :class "device-img-container" (image/elem :class-opts "responsive" :src (cell= (:image item))))
       (div :class "device-checkboxes-container"
            (p (text (:title item)))
            (div :class "ui checkbox field"
                 (input :type "checkbox" :id (:checkbox1-id @item)
                        :checked (cell= (checkbox-checked
                                          ((:id item) app-details)
                                          (:checkbox1-id item)))
                        :click #(swap! app-details assoc (:id @item)
                                       (checkbox-state ((:id @item) @app-details) (:checkbox1-id @item))))
                 (label :for (:checkbox1-id @item) (text (:label1 item)))))))

(defn target-customers []
  (div :id "target-customers" :class "ui form basic segment"
       (div :class "field"
            (p :class "ui small header" "Who are your target customers?")
            (div :class "ui four column doubling grid"
                 (loop-tpl :bindings [item location-items]
                           (item-checkbox item))))))

(defelem tnc-and-nda []
  [(div :class "sixteen wide column"
        (div :class "ui center aligned basic segment"
             (h2 :class "ui large header"
                 (image/elem :class-opts "ui tiny inline image"
                      :src "/images/app-builder/nda.png")
                 (div :class "center aligned content"
                             "Your app idea is safe, everyone is under NDA.")))
        (div :class "ui hidden divider")
        (div :class "ui secondary basic center aligned segment"
             (div :class "ui checkbox"
                  (input :type "checkbox" :name "terms-conditions" :id "nda"
                         :checked (cell= (:tnc app-details))
                         :click #(reset! app-details
                                           (assoc @app-details :tnc
                                             (not (:tnc @app-details)))) )
                  (label :for "nda" "I agree to Exicon's "
                         (a :href "/terms-of-use/"
                            :target "_blank"
                            "Terms & Conditions")
                         " and "
                         (a :href "/Exicon-Mutual-NDA-2014-09-18.pdf" :target "_blank" "NDA")))))
   (div :class "ui hidden divider")])
