(ns homepage.layout
  (:require-macros
    [config :refer [inspectlet-wid inspectlet-feature
                    hs-portal-id hs-newsletter-id hs-contact-us-id]])
  (:require
    [homepage.top-nav :refer [top-nav]]
    [homepage.bottom-nav :refer [bottom-nav]]))

(defn when-hubspot [f]
  (timeout
    (fn try-again []
      (if-not (aget js/window "hbspt")
        (timeout try-again 20)
        (f)))))

(defn create-hs-form [custom-opts]
  (let [default-opts {:css ""
                      :portalId (hs-portal-id)}
        opts (clj->js (merge default-opts custom-opts))]
    (when-hubspot #(.. js/hbspt -forms (create opts)))))

(defn inspect [field details]
  (.push js/__insp (clj->js [field details])))

(defn row []
  (div
    :class "column sixteen wide center aligned"))
(defc contact-us-visible? false)

(defelem modal-dialog
  [{:keys [id visible title bg-action]
    :or {title ""}}
   kids]
  (let [hide #(reset! visible false)
        bg-click (if bg-action bg-action hide)]
    [((div :class "modal-bg")
      :class (cell= {:show-modal visible})
      :click bg-click )
     ((div :class "ui small modal")
      :style "min-heigth:100px"
      :class (cell= {:visible visible})
      (div :class "header" title)
      (div :id id :class "content"
           "Loading...")
      kids)]))

(defelem secondary-header
  [{:keys [header sub-header page center id]
    :or {page "" center true id "page-title"}} kids]
  ((section :id id :class (str page " aligned row"))
   :class {:center center}
   ((div :class "column title sizer")
    :class {:centered center}
    ((h1 :class "ui large header") :text header
     :class {:center center
             :aligned center})
    (if sub-header
      ((h2 :class "ui small header") :text sub-header
       :class {:center center
               :aligned center})))))

(defelem section-header
  [{:keys [background inverted size centered color header]
    :or {:size "small"
         :color ""}}
   kids]
  ((div :class "ui basic segment")
   :class {:tertiary background :inverted inverted}
   (div :class "ui title sizer"
        ((h2 :class (str "ui header " size " " color))
         :class {:center centered
                 :aligned centered
                 :inverted inverted}
         header))
   kids
   (div :class "ui hidden divider")))

(defn contact-us-modal [active?]
  ((div :class "ui modal")
   :class (cell= {:active true})
   (i :class "close red icon"
      :click #(reset! active? false))))

(defn subscribe-stick-form [subscribe-click]
  (let [opts {:target "#hs-form"
              :cssClass "ui small form basic segment"
              :submitButtonClass "ui submit teal button"
              :errorMessageClass "ui error message"
              :formId (hs-newsletter-id)}
        trigger-form (cell= (when subscribe-click
                              (create-hs-form opts)))]
    [((div :id "subscribe-stick-layer")
      :class (cell= {:show subscribe-click}))
     ((div :id "subscribe-stick-form")
      :class "ui fixed right basic segment"
      :class (cell= {:show subscribe-click})
      (i :class "large close icon"
         :click #(reset! subscribe-click false))
      (div :class "ui grid"
           (div :class "sixteen wide center aligned column"
                (h4 :class "ui header" "Subscribe to our FREE")
                (p "Newsletter • Reports • Infographs")
                (div :class "ui divider hidden header")
                (img :src "/images/header/subscribe.png"))
           (div :class "sixteen wide column"
                (div :id "hs-form" "Loading ...."))))]))

(defn subscribe-stick-btn [subscribe-click]
  (a :href "javascript:void(0);"
     :click #(reset! subscribe-click true)
     (div :id "subscribe-stick" :class
          (cell= {:show (not subscribe-click)}))))

(defelem contact-us-btn
  [{:keys [id css-class txt]
    :or {id "" css-class "" txt "Contact Us"}}]
  (let [opts {:target "#hs-contact-us"
              :cssClass "ui small form basic segment"
              :submitButtonClass "ui submit teal button"
              :errorMessageClass "ui error message"
              :formId (hs-contact-us-id)}
        trigger-form (cell= (when contact-us-visible?
                              (create-hs-form opts)))]
    (div :id id :class (str "ui "css-class" button")
         :click #(reset! contact-us-visible? true)
         :text txt)))

(defn load-inspectlet! []
  (with-timeout
    2000
    (let [document-protocol (-> js/document .-location .-protocol)
          inspectlet-src-compatible-with-file-protocol
          (str "http" (when (= document-protocol "https:") "s")
               "://cdn.inspectlet.com/inspectlet.js")
          inspectlet-src "//cdn.inspectlet.com/inspectlet.js"
          inspectlet-script (script :id "inspsync" :type "text/javascript"
                                    :async true :src inspectlet-src)
          head-elem (aget (.getElementsByTagName js/document "head") 0)]
      (.appendChild head-elem inspectlet-script))))

(defn load-dbg-inspectlet! []
  (with-timeout
    2000
    (let [inspectlet-script
          (script :id "inspsync" :type "text/javascript" :src "/inspectlet.js")
          head-elem
          (aget (.getElementsByTagName js/document "head") 0)]
      (.appendChild head-elem inspectlet-script))))

(defelem primary
  [{:keys [page-css page-title description keywords] :as attrs} content]
  (let [subscribe-click (cell false)
        content-attrs (dissoc attrs
                              :page-title :description :keywords :page-css)]
    (when (inspectlet-feature)
      (js* "window.__insp = window.__insp || [];")
      (inspect "wid" (inspectlet-wid))
      (with-init! (load-inspectlet!)))
    (html
      (head
        (title page-title)
        (html-meta :name "description" :content description)
        (html-meta :name "keywords" :content keywords)
        (html-meta :name "viewport"
                   :content "width=device-width, initial-scale=1.0")
        (style "body {display: none}")
        (link :href "/images/favicon.ico" :rel "shortcut icon")
        (link :href "/semantic-ui.css" :rel "stylesheet")
        (link :href "/homepage.inc.css" :rel "stylesheet")
        (link :href "/main.inc.css" :rel "stylesheet")
        (link :href "/top-nav.inc.css" :rel "stylesheet")
        (link :href page-css :rel "stylesheet"))
      (body :toggle (cell true)
            (subscribe-stick-btn subscribe-click)
            (subscribe-stick-form subscribe-click)
            (modal-dialog :id "hs-contact-us" :title "Contact Us"
                          :visible contact-us-visible?)
            (contact-us-btn :id "contact-us-btn" :css-class "small")
            (div :id "top-nav"
                 (top-nav :class "fluid hidden")
                 (top-nav :class "fixed"))
            ((div :id "content") content-attrs content)
            (bottom-nav)
            (script :charset "utf-8"
                    :type "text/javascript"
                    :src "//js.hsforms.net/forms/v2.js")))))))
